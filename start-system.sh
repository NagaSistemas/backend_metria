#!/bin/bash

echo "üé∑ INICIANDO SISTEMA MUZZAJAZZ UNIFICADO"
echo "========================================"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

# Verificar se est√° no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "Execute este script na raiz do projeto muzzajazz-system"
    exit 1
fi

# Iniciar backend
log "üöÄ Iniciando Backend (Porta 3001)..."
cd backend
if [ ! -d "node_modules" ]; then
    log "üì¶ Instalando depend√™ncias do backend..."
    npm install
fi

# Verificar banco de dados
if [ ! -f "prisma/dev.db" ]; then
    log "üóÑÔ∏è Criando banco de dados..."
    npx prisma db push
fi

# Iniciar backend em background
npm run dev &
BACKEND_PID=$!
log "‚úÖ Backend iniciado (PID: $BACKEND_PID)"

cd ..

# Aguardar backend inicializar
sleep 3

# Iniciar frontend
log "üé® Iniciando Frontend Unificado (Porta 3000)..."
cd cardapio-digital

if [ ! -d "node_modules" ]; then
    log "üì¶ Instalando depend√™ncias do frontend..."
    npm install
fi

# Iniciar frontend em background
npm run dev &
FRONTEND_PID=$!
log "‚úÖ Frontend iniciado (PID: $FRONTEND_PID)"

cd ..

# Aguardar inicializa√ß√£o completa
sleep 5

echo ""
log "üéâ SISTEMA MUZZAJAZZ INICIADO COM SUCESSO!"
echo ""
echo -e "${BLUE}üì± URLs Dispon√≠veis:${NC}"
echo -e "   üçï Card√°pio:     ${GREEN}http://localhost:3000${NC}"
echo -e "   ‚öôÔ∏è  Admin:        ${GREEN}http://localhost:3000/admin${NC}"
echo -e "   üç≥ Cozinha:      ${GREEN}http://localhost:3000/kitchen${NC}"
echo -e "   üîß API:          ${GREEN}http://localhost:3001${NC}"
echo ""
echo -e "${YELLOW}üí° Funcionalidades Ativas:${NC}"
echo "   ‚úÖ PWA Instal√°vel"
echo "   ‚úÖ Gamifica√ß√£o Jazz Master"
echo "   ‚úÖ Analytics Premium com IA"
echo "   ‚úÖ WhatsApp Business"
echo "   ‚úÖ IA Charlie Conversacional"
echo "   ‚úÖ Assistente de Voz"
echo "   ‚úÖ Realidade Aumentada"
echo "   ‚úÖ Multi-Restaurante Enterprise"
echo "   ‚úÖ Sistema de Reservas"
echo "   ‚úÖ Pagamentos Asaas"
echo ""
echo -e "${GREEN}üé∑ Aprecie a vida como uma boa m√∫sica!${NC}"
echo ""

# Fun√ß√£o para cleanup ao sair
cleanup() {
    echo ""
    log "üõë Parando sistema..."
    kill $BACKEND_PID 2>/dev/null
    kill $FRONTEND_PID 2>/dev/null
    log "‚úÖ Sistema parado com sucesso!"
    exit 0
}

# Capturar Ctrl+C
trap cleanup SIGINT

# Manter script rodando
log "‚å®Ô∏è  Pressione Ctrl+C para parar o sistema"
wait